//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 4 storyboards.
  struct storyboard {
    /// Storyboard `Dialog`.
    static let dialog = _R.storyboard.dialog()
    /// Storyboard `FloatingPanelExample`.
    static let floatingPanelExample = _R.storyboard.floatingPanelExample()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Splash`.
    static let splash = _R.storyboard.splash()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Dialog", bundle: ...)`
    static func dialog(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.dialog)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "FloatingPanelExample", bundle: ...)`
    static func floatingPanelExample(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.floatingPanelExample)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Splash", bundle: ...)`
    static func splash(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.splash)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `GoogleService-Info-alpha.plist`.
    static let googleServiceInfoAlphaPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info-alpha", pathExtension: "plist")
    /// Resource file `GoogleService-Info-beta.plist`.
    static let googleServiceInfoBetaPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info-beta", pathExtension: "plist")
    /// Resource file `GoogleService-Info-debug.plist`.
    static let googleServiceInfoDebugPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info-debug", pathExtension: "plist")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info-alpha", withExtension: "plist")`
    static func googleServiceInfoAlphaPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoAlphaPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info-beta", withExtension: "plist")`
    static func googleServiceInfoBetaPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoBetaPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "GoogleService-Info-debug", withExtension: "plist")`
    static func googleServiceInfoDebugPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoDebugPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `splash`.
    static let splash = Rswift.ImageResource(bundle: R.hostingBundle, name: "splash")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "splash", bundle: ..., traitCollection: ...)`
    static func splash(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splash, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `ToastMessageView`.
    static let toastMessageView = _R.nib._ToastMessageView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ToastMessageView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toastMessageView) instead")
    static func toastMessageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toastMessageView)
    }
    #endif

    static func toastMessageView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.toastMessageView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 6 localization keys.
    struct localizable {
      /// en translation: error
      ///
      /// Locales: en, ko
      static let error = Rswift.StringResource(key: "error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko"], comment: nil)
      /// en translation: hello
      ///
      /// Locales: en, ko
      static let hello = Rswift.StringResource(key: "hello", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko"], comment: nil)
      /// en translation: routeFloatingEx
      ///
      /// Locales: en, ko
      static let routeFloatingEx = Rswift.StringResource(key: "route-floating-ex", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko"], comment: nil)
      /// en translation: server error
      ///
      /// Locales: en, ko
      static let errorServerDefaultMessage = Rswift.StringResource(key: "error-server-default-message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko"], comment: nil)
      /// en translation: server error
      ///
      /// Locales: en, ko
      static let serverError = Rswift.StringResource(key: "server-error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko"], comment: nil)
      /// en translation: temporary error
      ///
      /// Locales: en, ko
      static let errorTemporary = Rswift.StringResource(key: "error-temporary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ko"], comment: nil)

      /// en translation: error
      ///
      /// Locales: en, ko
      static func error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error"
        }

        return NSLocalizedString("error", bundle: bundle, comment: "")
      }

      /// en translation: hello
      ///
      /// Locales: en, ko
      static func hello(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hello", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hello"
        }

        return NSLocalizedString("hello", bundle: bundle, comment: "")
      }

      /// en translation: routeFloatingEx
      ///
      /// Locales: en, ko
      static func routeFloatingEx(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("route-floating-ex", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "route-floating-ex"
        }

        return NSLocalizedString("route-floating-ex", bundle: bundle, comment: "")
      }

      /// en translation: server error
      ///
      /// Locales: en, ko
      static func errorServerDefaultMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error-server-default-message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error-server-default-message"
        }

        return NSLocalizedString("error-server-default-message", bundle: bundle, comment: "")
      }

      /// en translation: server error
      ///
      /// Locales: en, ko
      static func serverError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("server-error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "server-error"
        }

        return NSLocalizedString("server-error", bundle: bundle, comment: "")
      }

      /// en translation: temporary error
      ///
      /// Locales: en, ko
      static func errorTemporary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("error-temporary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "error-temporary"
        }

        return NSLocalizedString("error-temporary", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _ToastMessageView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ToastMessageView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try dialog.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try floatingPanelExample.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try splash.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct dialog: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let dialogVC = StoryboardViewControllerResource<DialogVC>(identifier: "DialogVC")
      let name = "Dialog"

      func dialogVC(_: Void = ()) -> DialogVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: dialogVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.dialog().dialogVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'dialogVC' could not be loaded from storyboard 'Dialog' as 'DialogVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct floatingPanelExample: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let myContainerVC = StoryboardViewControllerResource<MyContainerVC>(identifier: "MyContainerVC")
      let name = "FloatingPanelExample"
      let sub1VC = StoryboardViewControllerResource<Sub1VC>(identifier: "Sub1VC")
      let sub2VC = StoryboardViewControllerResource<Sub2VC>(identifier: "Sub2VC")

      func myContainerVC(_: Void = ()) -> MyContainerVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myContainerVC)
      }

      func sub1VC(_: Void = ()) -> Sub1VC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sub1VC)
      }

      func sub2VC(_: Void = ()) -> Sub2VC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sub2VC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.floatingPanelExample().myContainerVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myContainerVC' could not be loaded from storyboard 'FloatingPanelExample' as 'MyContainerVC'.") }
        if _R.storyboard.floatingPanelExample().sub1VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sub1VC' could not be loaded from storyboard 'FloatingPanelExample' as 'Sub1VC'.") }
        if _R.storyboard.floatingPanelExample().sub2VC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sub2VC' could not be loaded from storyboard 'FloatingPanelExample' as 'Sub2VC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "splash", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'splash' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct splash: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SplashVC

      let bundle = R.hostingBundle
      let name = "Splash"
      let splashVC = StoryboardViewControllerResource<SplashVC>(identifier: "SplashVC")

      func splashVC(_: Void = ()) -> SplashVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: splashVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.splash().splashVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'splashVC' could not be loaded from storyboard 'Splash' as 'SplashVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
